# [PackageDev] target_format: plist, ext: tmLanguage
---
name: Why3
scopeName: source.base_scope
fileTypes: ['mlw', 'mlcfg', 'stdout']
uuid: d93903e8-7cc6-4ee7-b720-31fee12fe861


patterns:
  - name: 'meta.namespace.why'
    begin: '(module)\s+(?:(\p{Lu}[\p{L}_\p{Nd}]+))'
    end: '(end)'
    beginCaptures:
      '1':
        name: 'keyword.why'
      '2':
        name: 'entity.name.namespace'
    endCaptures:
      '1':
        name: 'keyword.why'
    patterns: [{ include: '$self' }]
  - match: '(use)\s+((?:([\p{Ll}_][\p{Alpha}\p{Nd}_]*)\.)*(?:(\p{Lu}[\p{Alpha}\p{Nd}_]*)))'
    captures:
      '1':
        name: 'keyword.control.import.why'
      '2':
        name: 'meta.path.why'
  - begin: '(clone)\s+((?:([\p{Ll}_][\p{Alpha}\p{Nd}_]*)\.)*(?:(\p{Lu}[\p{Alpha}\p{Nd}_]*)))\s+(as\s+(?:(\p{Lu}[\p{Alpha}\p{Nd}_]*)))'
    # find right way to scan for end of declaraton...
    end: '(?=\b(let|end|namespace|clone|use|axiom|goal|lemma)\b)|(?=^\s*$)'
    name: 'meta.group.clone'
    captures:
      '1':
        name: 'keyword.control.import.why'
      '2':
        name: 'meta.path.why'
  - begin: '\b(type|with)\s+([^=]*)(=)?'
    end: '(?=\b(type|with|let|end|val|predicate|function|namespace|clone|use|axiom|goal|lemma)\b)|(?=^\s*$)'
    beginCaptures:
      '1':
        name: 'keyword.other.why'
      '2':
        name: 'storage.type.why'
      '3':
        name: 'punctuation.separator'
    patterns: [{ include: '#typedefs' }]
  - begin: '\b(function|predicate)\s+([a-z][\p{Alpha}_\p{Nd}]*)'
    end: '(?=\b(type|with|let|end|val|predicate|function|namespace|use|clone|axiom|goal|lemma)\b)|(?=^\s*$)'
    beginCaptures:
      '1':
        name: 'keyword.declaration.function'
      '2':
        name: 'entity.name.function.why'
  - begin: '\b(let)\s+(rec\s+)?(cfg\s+)?([a-z][\p{Alpha}_\p{Nd}]*)'
    end: '(?=\b(type|val|predicate|function|namespace|clone|use|axiom|goal|lemma)\b)|(?=^\s*$)'
    beginCaptures:
      '1':
        name: 'keyword.declaration.function'
      '2':
        name: 'keyword.other.why'
      '3':
        name: 'keyword.other.why'
      '4':
        name: 'entity.name.function.why'
    name: 'meta.function.why'
    patterns: [{ include: '#program_exp' }]
  - begin: '\b(axiom|goal|lemma)\s+([a-z][\p{Alpha}_\p{Nd}]*)\s+:'
    end: '(?=\b(type|with|let|end|val|predicate|function|namespace|clone|use|axiom|goal|lemma)\b)|(?=^\s*$)'
    beginCaptures:
      '1':
        name: 'keyword.declaration.other.why'
      '2':
        name: 'entity.name.function.why'
    patterns: [{ include: '#term' }]
  - include: '#keywords'
repository:
  keywords:
    patterns:
      - match: 'variant|ensures|requires'
        name: 'variable.annotation'
      - match: 'if|else|then'
        name: 'keyword.control'

  typedefs:
    patterns:
      - match: \|
        name: 'punctuation.separator'
      - match: '\p{Lu}[\p{Alpha}\p{Nd}_]*'
        name: 'entity.name.enum'
      - begin: '\('
        end: '\)'
        name: 'meta.parens'
        patterns: [{ include: '#typedefs' }]
      - match: '(?:'')?[\p{Ll}\p{Nd}_]*'
        name: 'meta.type'
  term:
    patterns:
      - begin: '(match)\s+(.*)(with)'
        end: '(end)'
        beginCaptures:
          '1':
            name: 'keyword.why'
          '3':
            name: 'keyword.why'
        endCaptures:
          '1':
            name: 'keyword.match.why'
        name: 'meta.match.why'
        patterns: [{ include: '#branch' }]
  branch:
    patterns:
      - begin: '(\|)'
        end: '(->)'
        beginCaptures:
          '1':
            name: 'punctuation.separator'
        endCaptures:
          '1':
            name: 'punctuation.separator'
        name: 'meta.branch.why'
        patterns: [{ include: '#pattern' }]
  pattern:
    patterns:
      - match: '\p{Lu}[\p{Alpha}\p{Nd}_]*'
        name: 'support.type.why'
  program_exp:
    patterns:
      - begin: '(assume)\s+ {'
        end: '}'
        beginCaptures:
          '1':
            name: 'keyword.other'