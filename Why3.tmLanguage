<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>mlw</string>
		<string>mlcfg</string>
		<string>stdout</string>
	</array>
	<key>name</key>
	<string>Why3</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>begin</key>
			<string>(module)\s+(?:(\p{Lu}[\p{L}_\p{Nd}]+))</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.why</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.namespace</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(end)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.why</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.namespace.why</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.why</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.path.why</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(use)\s+((?:([\p{Ll}_][\p{Alpha}\p{Nd}_]*)\.)*(?:(\p{Lu}[\p{Alpha}\p{Nd}_]*)))</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(clone)\s+((?:([\p{Ll}_][\p{Alpha}\p{Nd}_]*)\.)*(?:(\p{Lu}[\p{Alpha}\p{Nd}_]*)))\s+(as\s+(?:(\p{Lu}[\p{Alpha}\p{Nd}_]*)))</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.why</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.path.why</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\b(let|end|namespace|clone|use|axiom|goal|lemma)\b)|(?=^\s*$)</string>
			<key>name</key>
			<string>meta.group.clone</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\b(type|with)\s+([^=]*)(=)?</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.why</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.why</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\b(type|with|let|end|val|predicate|function|namespace|clone|use|axiom|goal|lemma)\b)|(?=^\s*$)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#typedefs</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\b(function|predicate)\s+([a-z][\p{Alpha}_\p{Nd}]*)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.declaration.function</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.why</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\b(type|with|let|end|val|predicate|function|namespace|use|clone|axiom|goal|lemma)\b)|(?=^\s*$)</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\b(let)\s+(rec\s+)?(cfg\s+)?([a-z][\p{Alpha}_\p{Nd}]*)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.declaration.function</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.other.why</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.other.why</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.why</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\b(type|val|predicate|function|namespace|clone|use|axiom|goal|lemma)\b)|(?=^\s*$)</string>
			<key>name</key>
			<string>meta.function.why</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#program_exp</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\b(axiom|goal|lemma)\s+([a-z][\p{Alpha}_\p{Nd}]*)\s+:</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.declaration.other.why</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.why</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\b(type|with|let|end|val|predicate|function|namespace|clone|use|axiom|goal|lemma)\b)|(?=^\s*$)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#term</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>include</key>
			<string>#keywords</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>branch</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\|)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(-&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.branch.why</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#pattern</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>keywords</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>variant|ensures|requires</string>
					<key>name</key>
					<string>variable.annotation</string>
				</dict>
				<dict>
					<key>match</key>
					<string>if|else|then</string>
					<key>name</key>
					<string>keyword.control</string>
				</dict>
			</array>
		</dict>
		<key>pattern</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\p{Lu}[\p{Alpha}\p{Nd}_]*</string>
					<key>name</key>
					<string>support.type.why</string>
				</dict>
			</array>
		</dict>
		<key>program_exp</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>assume\s+ {</string>
					<key>end</key>
					<string>}</string>
				</dict>
			</array>
		</dict>
		<key>term</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(match)\s+(.*)(with)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.why</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.why</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(end)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.match.why</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.match.why</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#branch</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>typedefs</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\|</string>
					<key>name</key>
					<string>punctuation.separator</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\p{Lu}[\p{Alpha}\p{Nd}_]*</string>
					<key>name</key>
					<string>entity.name.enum</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>end</key>
					<string>\)</string>
					<key>name</key>
					<string>meta.parens</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#typedefs</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>(?:')?[\p{Ll}\p{Nd}_]*</string>
					<key>name</key>
					<string>meta.type</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.base_scope</string>
	<key>uuid</key>
	<string>d93903e8-7cc6-4ee7-b720-31fee12fe861</string>
</dict>
</plist>
